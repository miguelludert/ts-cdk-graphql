"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthDatasourceProvider = exports.LambdaDatasourceProvider = exports.DynamoDatasourceProvider = void 0;
const graphql_dynamodb_transformer_1 = require("graphql-dynamodb-transformer");
const graphql_connection_transformer_1 = require("graphql-connection-transformer");
const graphql_function_transformer_1 = require("graphql-function-transformer");
const graphql_auth_transformer_1 = require("graphql-auth-transformer");
const graphql_key_transformer_1 = require("graphql-key-transformer");
const dynamo_1 = require("../providers/dynamo");
const lambda_1 = require("../providers/lambda");
const utils_1 = require("./utils");
// data sources must be in typescript
class DynamoDatasourceProvider {
    getTransformer() {
        return [
            // the order of transformers matters
            new graphql_connection_transformer_1.ModelConnectionTransformer(),
            new graphql_dynamodb_transformer_1.DynamoDBModelTransformer(),
            new graphql_key_transformer_1.KeyTransformer(),
        ];
    }
    createResources(scope, props, api, cfSchema) {
        utils_1.info("dynamo provider");
        return utils_1.cast(dynamo_1.createDynamoDataSource(scope, props, api, cfSchema));
    }
}
exports.DynamoDatasourceProvider = DynamoDatasourceProvider;
// data sources must be in typescript
class LambdaDatasourceProvider {
    getTransformer() {
        return [
            new graphql_function_transformer_1.FunctionTransformer()
        ];
    }
    createResources(scope, props, api, cfSchema) {
        utils_1.info("lambda provider");
        return utils_1.cast(lambda_1.createLambdaDataSource(scope, props, api, cfSchema));
    }
}
exports.LambdaDatasourceProvider = LambdaDatasourceProvider;
// data sources must be in typescript
class AuthDatasourceProvider {
    getTransformer() {
        return [
            new graphql_auth_transformer_1.ModelAuthTransformer()
        ];
    }
    createResources(scope, props, api, cfSchema) {
        // info("lambda provider");
        throw new Error("asdfasdf");
        return utils_1.cast(lambda_1.createLambdaDataSource(scope, props, api, cfSchema));
    }
}
exports.AuthDatasourceProvider = AuthDatasourceProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3R5cGVzY3JpcHQvcHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtFQUF3RTtBQUN4RSxtRkFBNEU7QUFDNUUsK0VBQW1FO0FBQ25FLHVFQUFnRTtBQUNoRSxxRUFBeUQ7QUFTekQsZ0RBQTZEO0FBQzdELGdEQUE2RDtBQUM3RCxtQ0FBcUM7QUFFckMscUNBQXFDO0FBQ3JDLE1BQWEsd0JBQXdCO0lBQ3BDLGNBQWM7UUFDYixPQUFPO1lBQ04sb0NBQW9DO1lBQ3BDLElBQUksMkRBQTBCLEVBQUU7WUFDaEMsSUFBSSx1REFBd0IsRUFBRTtZQUM5QixJQUFJLHdDQUFjLEVBQUU7U0FDcEIsQ0FBQztJQUNILENBQUM7SUFDRCxlQUFlLENBQ2QsS0FBZ0IsRUFDaEIsS0FBOEIsRUFDOUIsR0FBZSxFQUNmLFFBQWE7UUFFYixZQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN4QixPQUFPLFlBQUksQ0FBaUIsK0JBQXNCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNsRixDQUFDO0NBQ0Q7QUFsQkQsNERBa0JDO0FBRUQscUNBQXFDO0FBQ3JDLE1BQWEsd0JBQXdCO0lBQ3BDLGNBQWM7UUFDYixPQUFPO1lBQ04sSUFBSSxrREFBbUIsRUFBRTtTQUN6QixDQUFBO0lBQ0YsQ0FBQztJQUNELGVBQWUsQ0FDZCxLQUFnQixFQUNoQixLQUE4QixFQUM5QixHQUFlLEVBQ2YsUUFBYTtRQUViLFlBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sWUFBSSxDQUFpQiwrQkFBc0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Q0FDRDtBQWZELDREQWVDO0FBRUQscUNBQXFDO0FBQ3JDLE1BQWEsc0JBQXNCO0lBQ2xDLGNBQWM7UUFDYixPQUFPO1lBQ04sSUFBSSwrQ0FBb0IsRUFBRTtTQUMxQixDQUFBO0lBQ0YsQ0FBQztJQUNELGVBQWUsQ0FDZCxLQUFnQixFQUNoQixLQUE4QixFQUM5QixHQUFlLEVBQ2YsUUFBYTtRQUViLDJCQUEyQjtRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzNCLE9BQU8sWUFBSSxDQUFpQiwrQkFBc0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Q0FDRDtBQWhCRCx3REFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHsgRHluYW1vREJNb2RlbFRyYW5zZm9ybWVyIH0gZnJvbSBcImdyYXBocWwtZHluYW1vZGItdHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7IE1vZGVsQ29ubmVjdGlvblRyYW5zZm9ybWVyIH0gZnJvbSBcImdyYXBocWwtY29ubmVjdGlvbi10cmFuc2Zvcm1lclwiO1xuaW1wb3J0IHsgRnVuY3Rpb25UcmFuc2Zvcm1lciB9IGZyb20gXCJncmFwaHFsLWZ1bmN0aW9uLXRyYW5zZm9ybWVyXCI7XG5pbXBvcnQgeyBNb2RlbEF1dGhUcmFuc2Zvcm1lciB9IGZyb20gXCJncmFwaHFsLWF1dGgtdHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7IEtleVRyYW5zZm9ybWVyIH0gZnJvbSBcImdyYXBocWwta2V5LXRyYW5zZm9ybWVyXCI7XG5pbXBvcnQgeyBJVHJhbnNmb3JtZXIgfSBmcm9tIFwiZ3JhcGhxbC10cmFuc2Zvcm1lci1jb3JlXCI7XG5pbXBvcnQgeyBHcmFwaHFsQXBpIH0gZnJvbSBcIkBhd3MtY2RrL2F3cy1hcHBzeW5jXCI7XG5cbmltcG9ydCB7XG5cdElfRGF0YXNvdXJjZVByb3ZpZGVyLFxuXHRJX0NvbnN0cnVjdE1hcCxcblx0SV9BcHBTeW5jR3FsU2NoZW1hUHJvcHMsXG59IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUR5bmFtb0RhdGFTb3VyY2UgfSBmcm9tIFwiLi4vcHJvdmlkZXJzL2R5bmFtb1wiO1xuaW1wb3J0IHsgY3JlYXRlTGFtYmRhRGF0YVNvdXJjZSB9IGZyb20gXCIuLi9wcm92aWRlcnMvbGFtYmRhXCI7XG5pbXBvcnQgeyBjYXN0LCBpbmZvIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuLy8gZGF0YSBzb3VyY2VzIG11c3QgYmUgaW4gdHlwZXNjcmlwdFxuZXhwb3J0IGNsYXNzIER5bmFtb0RhdGFzb3VyY2VQcm92aWRlciBpbXBsZW1lbnRzIElfRGF0YXNvdXJjZVByb3ZpZGVyIHtcblx0Z2V0VHJhbnNmb3JtZXIoKTogSVRyYW5zZm9ybWVyW10ge1xuXHRcdHJldHVybiBbXG5cdFx0XHQvLyB0aGUgb3JkZXIgb2YgdHJhbnNmb3JtZXJzIG1hdHRlcnNcblx0XHRcdG5ldyBNb2RlbENvbm5lY3Rpb25UcmFuc2Zvcm1lcigpLFxuXHRcdFx0bmV3IER5bmFtb0RCTW9kZWxUcmFuc2Zvcm1lcigpLFxuXHRcdFx0bmV3IEtleVRyYW5zZm9ybWVyKCksXG5cdFx0XTtcblx0fVxuXHRjcmVhdGVSZXNvdXJjZXMoXG5cdFx0c2NvcGU6IENvbnN0cnVjdCxcblx0XHRwcm9wczogSV9BcHBTeW5jR3FsU2NoZW1hUHJvcHMsXG5cdFx0YXBpOiBHcmFwaHFsQXBpLFxuXHRcdGNmU2NoZW1hOiBhbnksXG5cdCk6IElfQ29uc3RydWN0TWFwIHtcblx0XHRpbmZvKFwiZHluYW1vIHByb3ZpZGVyXCIpO1xuXHRcdHJldHVybiBjYXN0PElfQ29uc3RydWN0TWFwPihjcmVhdGVEeW5hbW9EYXRhU291cmNlKHNjb3BlLCBwcm9wcywgYXBpLCBjZlNjaGVtYSkpO1xuXHR9XG59XG5cbi8vIGRhdGEgc291cmNlcyBtdXN0IGJlIGluIHR5cGVzY3JpcHRcbmV4cG9ydCBjbGFzcyBMYW1iZGFEYXRhc291cmNlUHJvdmlkZXIgaW1wbGVtZW50cyBJX0RhdGFzb3VyY2VQcm92aWRlciB7XG5cdGdldFRyYW5zZm9ybWVyKCk6IElUcmFuc2Zvcm1lcltdIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0bmV3IEZ1bmN0aW9uVHJhbnNmb3JtZXIoKVxuXHRcdF1cblx0fVxuXHRjcmVhdGVSZXNvdXJjZXMoXG5cdFx0c2NvcGU6IENvbnN0cnVjdCxcblx0XHRwcm9wczogSV9BcHBTeW5jR3FsU2NoZW1hUHJvcHMsXG5cdFx0YXBpOiBHcmFwaHFsQXBpLFxuXHRcdGNmU2NoZW1hOiBhbnksXG5cdCk6IElfQ29uc3RydWN0TWFwIHtcblx0XHRpbmZvKFwibGFtYmRhIHByb3ZpZGVyXCIpO1xuXHRcdHJldHVybiBjYXN0PElfQ29uc3RydWN0TWFwPihjcmVhdGVMYW1iZGFEYXRhU291cmNlKHNjb3BlLCBwcm9wcywgYXBpLCBjZlNjaGVtYSkpO1xuXHR9XG59XG5cbi8vIGRhdGEgc291cmNlcyBtdXN0IGJlIGluIHR5cGVzY3JpcHRcbmV4cG9ydCBjbGFzcyBBdXRoRGF0YXNvdXJjZVByb3ZpZGVyIGltcGxlbWVudHMgSV9EYXRhc291cmNlUHJvdmlkZXIge1xuXHRnZXRUcmFuc2Zvcm1lcigpOiBJVHJhbnNmb3JtZXJbXSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdG5ldyBNb2RlbEF1dGhUcmFuc2Zvcm1lcigpXG5cdFx0XVxuXHR9XG5cdGNyZWF0ZVJlc291cmNlcyhcblx0XHRzY29wZTogQ29uc3RydWN0LFxuXHRcdHByb3BzOiBJX0FwcFN5bmNHcWxTY2hlbWFQcm9wcyxcblx0XHRhcGk6IEdyYXBocWxBcGksXG5cdFx0Y2ZTY2hlbWE6IGFueSxcblx0KTogSV9Db25zdHJ1Y3RNYXAge1xuXHRcdC8vIGluZm8oXCJsYW1iZGEgcHJvdmlkZXJcIik7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiYXNkZmFzZGZcIilcblx0XHRyZXR1cm4gY2FzdDxJX0NvbnN0cnVjdE1hcD4oY3JlYXRlTGFtYmRhRGF0YVNvdXJjZShzY29wZSwgcHJvcHMsIGFwaSwgY2ZTY2hlbWEpKTtcblx0fVxufVxuXG4iXX0=