"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponseResolverName = exports.getRequestResolverName = exports.getTypeName = exports.getFieldName = exports.getDataSourceName = exports.createFunctionsFromResource = exports.createPipelineResolversFromResource = exports.createResolversFromResource = exports.createResolversAndFunctionsFromStack = exports.createResolversAndFunctionsFromSchema = void 0;
const aws_appsync_1 = require("@aws-cdk/aws-appsync");
const ramda_1 = require("ramda");
const constants_1 = require("../constants");
const utils_1 = require("./utils");
const self = __importStar(require("./functions"));
const createResolversAndFunctionsFromSchema = (scope, props, api, cfSchema, resources) => {
    utils_1.info("functions.createResolversAndFunctionsFromSchema");
    const stackResources = Object.values(cfSchema.stacks);
    const results = stackResources.map(self.createResolversAndFunctionsFromStack(scope, props, api, cfSchema, resources));
    return results;
};
exports.createResolversAndFunctionsFromSchema = createResolversAndFunctionsFromSchema;
exports.createResolversAndFunctionsFromStack = ramda_1.curry((scope, props, api, cfSchema, datasources, stack) => {
    utils_1.info("functions.createResolversAndFunctionsFromStack");
    const resourcePairs = ramda_1.toPairs(stack.Resources);
    const { [constants_1.RESOURCE_TYPE_RESOLVER]: resolverPairs, [constants_1.RESOURCE_TYPE_FUNCTION_CONFIG]: funcPairs, } = ramda_1.groupBy(([, resource]) => resource.Type, resourcePairs);
    const funcs = ramda_1.map(self.createFunctionsFromResource(scope, props, api, cfSchema, datasources), funcPairs || []);
    const pipelineResolverPairs = ramda_1.filter(([, cfn]) => cfn.Properties.Kind === "PIPELINE", resolverPairs || []);
    const regularResolverPairs = ramda_1.filter(([, cfn]) => cfn.Properties.Kind !== "PIPELINE", resolverPairs || []);
    const resolvers = ramda_1.map(self.createResolversFromResource(scope, props, api, cfSchema, datasources), regularResolverPairs || []);
    const pipelineResolvers = ramda_1.map(self.createPipelineResolversFromResource(scope, props, api, cfSchema, datasources, funcs), pipelineResolverPairs || []);
    return {
        funcs,
        resolvers,
    };
});
exports.createResolversFromResource = ramda_1.curry((scope, props, api, cfSchema, datasources, [resolverName, resolverCfn]) => {
    utils_1.info("functions.createResolversFromResource");
    const datasourceName = exports.getDataSourceName(resolverCfn);
    if (!datasourceName) {
        return;
    }
    const { datasource } = datasources.find((f) => f && f.datasourceName == datasourceName);
    const typeName = self.getTypeName(resolverCfn);
    const fieldName = self.getFieldName(resolverCfn);
    const requestMappingTemplateName = self.getRequestResolverName(resolverCfn);
    const responseMappingTemplateName = self.getResponseResolverName(resolverCfn);
    const resolverProps = {
        fieldName,
        typeName,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.fromString(cfSchema.resolvers[requestMappingTemplateName]),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.fromString(cfSchema.resolvers[responseMappingTemplateName]),
    };
    const resolver = datasource.createResolver(resolverProps);
    return;
    {
        resolverName, resolver, resolverProps, resolverCfn;
    }
});
exports.createPipelineResolversFromResource = ramda_1.curry((scope, props, api, cfSchema, datasources, funcs, [resolverName, resolverCfn]) => {
    utils_1.info("functions.createPipelineResolversFromResource");
    const funcName = resolverCfn.DependsOn;
    const item = funcs.find((f) => f.funcName === funcName);
    const { datasource } = item;
    //const pipelineConfig = [func];
    const typeName = self.getTypeName(resolverCfn);
    const fieldName = self.getFieldName(resolverCfn);
    const requestMappingTemplateName = self.getRequestResolverName(resolverCfn);
    const responseMappingTemplateName = self.getResponseResolverName(resolverCfn);
    const resolverProps = {
        api,
        fieldName,
        typeName,
    };
    // console.info("GIMME", {resolverName, fieldName, typeName, requestMappingTemplateName, responseMappingTemplateName, func : func.constructor, funcName});
    // const resolver = new Resolver(scope, resolverName, resolverProps);
    const resolver = datasource.createResolver(resolverProps);
    return {
        resolverName,
        resolver,
        resolverProps,
        resolverCfn,
    };
});
exports.createFunctionsFromResource = ramda_1.curry((scope, props, api, cfSchema, datasources, [funcName, funcCfn]) => {
    utils_1.info("functions.createFunctionsFromResource", funcCfn);
    const datasourceName = funcCfn.Properties.DataSourceName;
    if (!datasourceName) {
        return;
    }
    const { datasource } = datasources.find((f) => f && f.datasourceName == datasourceName);
    if (!datasource) {
        throw new Error(`Datasource '${datasourceName}' not found`);
    }
    const requestMappingTemplateName = `${funcName}.req.vtl`;
    const responseMappingTemplateName = `${funcName}.res.vtl`;
    const funcProps = {
        name: funcName + "uuuuu",
        description: `${funcName} Lambda Function`,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.fromString(cfSchema.pipelineFunctions[requestMappingTemplateName]),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.fromString(cfSchema.pipelineFunctions[responseMappingTemplateName]),
    };
    //const func = datasource.createFunction(funcProps);
    return {
        datasource,
        datasourceName,
        funcName,
        //func,
        funcProps,
    };
});
exports.getDataSourceName = ramda_1.view(ramda_1.lensPath(["Properties", "DataSourceName", "Fn::GetAtt", 0]));
exports.getFieldName = ramda_1.view(ramda_1.lensPath(["Properties", "FieldName"]));
exports.getTypeName = ramda_1.view(ramda_1.lensPath(["Properties", "TypeName"]));
const getRequestResolverName = (resource) => ramda_1.join(".", ramda_1.view(ramda_1.lensPath([
    "Properties",
    "RequestMappingTemplateS3Location",
    "Fn::Sub",
    1,
    "ResolverFileName",
    "Fn::Join",
    1,
]), resource));
exports.getRequestResolverName = getRequestResolverName;
const getResponseResolverName = (resource) => ramda_1.join(".", ramda_1.view(ramda_1.lensPath([
    "Properties",
    "ResponseMappingTemplateS3Location",
    "Fn::Sub",
    1,
    "ResolverFileName",
    "Fn::Join",
    1,
]), resource));
exports.getResponseResolverName = getResponseResolverName;
//# sourceMappingURL=data:application/json;base64,