[
  {
    "dataSourceProps": [
      "blog-table-ds",
      "A dynamo table datasource for Blog"
    ],
    "tableProps": [
      "blog-table",
      {
        "tableName": "blog-table"
      }
    ],
    "resolverProps": [
      {
        "typeName": "Query",
        "fieldName": "getBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listBlogs",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"sortDirection is not supported for List operations without a Sort key defined.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createBlog",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "getBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.blogPostId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listBlogPosts",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( $util.isNull($ctx.args.blogId) && !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"When providing argument 'sortDirection' you must also provide argument 'blogId'.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n## [Start] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogPostId) && $util.isNull($ctx.args.blogId) )\n  $util.error(\"When providing argument 'blogPostId' you must also provide arguments blogId\", \"InvalidArgumentsError\")\n#end\n## [End] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [Start] Applying Key Condition **\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.beginsWith) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.beginsWith\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.between) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey0\", { \"S\": \"$ctx.args.blogPostId.between[0]\" }))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey1\", { \"S\": \"$ctx.args.blogPostId.between[1]\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.eq) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey = :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.eq\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.lt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey < :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.lt\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.le) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey <= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.le\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.gt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey > :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.gt\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.ge) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey >= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.ge\" }))\n#end\n## [End] Applying Key Condition **\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createBlogPost",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"BlogPost\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"BlogPost\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "getComment",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.commentId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listComments",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( $util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"When providing argument 'sortDirection' you must also provide argument 'blogPostId'.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n## [Start] Validate key arguments. **\n#if( !$util.isNull($ctx.args.commentId) && $util.isNull($ctx.args.blogPostId) )\n  $util.error(\"When providing argument 'commentId' you must also provide arguments blogPostId\", \"InvalidArgumentsError\")\n#end\n## [End] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogPostId) )\n  #set( $modelQueryExpression.expression = \"#blogPostId = :blogPostId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogPostId\": \"blogPostId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogPostId\": {\n      \"S\": \"$ctx.args.blogPostId\"\n  }\n} )\n#end\n## [Start] Applying Key Condition **\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.beginsWith) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.beginsWith\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.between) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey0\", { \"S\": \"$ctx.args.commentId.between[0]\" }))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey1\", { \"S\": \"$ctx.args.commentId.between[1]\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.eq) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey = :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.eq\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.lt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey < :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.lt\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.le) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey <= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.le\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.gt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey > :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.gt\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.ge) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey >= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.ge\" }))\n#end\n## [End] Applying Key Condition **\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createComment",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n\n\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateComment",
        "requestMappingTemplate": "\n\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteComment",
        "requestMappingTemplate": "\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      }
    ]
  },
  {
    "dataSourceProps": [
      "blog-post-table-ds",
      "A dynamo table datasource for BlogPost"
    ],
    "tableProps": [
      "blog-post-table",
      {
        "tableName": "blog-post-table"
      }
    ],
    "resolverProps": [
      {
        "typeName": "Query",
        "fieldName": "getBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listBlogs",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"sortDirection is not supported for List operations without a Sort key defined.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createBlog",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "getBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.blogPostId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listBlogPosts",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( $util.isNull($ctx.args.blogId) && !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"When providing argument 'sortDirection' you must also provide argument 'blogId'.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n## [Start] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogPostId) && $util.isNull($ctx.args.blogId) )\n  $util.error(\"When providing argument 'blogPostId' you must also provide arguments blogId\", \"InvalidArgumentsError\")\n#end\n## [End] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [Start] Applying Key Condition **\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.beginsWith) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.beginsWith\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.between) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey0\", { \"S\": \"$ctx.args.blogPostId.between[0]\" }))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey1\", { \"S\": \"$ctx.args.blogPostId.between[1]\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.eq) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey = :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.eq\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.lt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey < :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.lt\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.le) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey <= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.le\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.gt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey > :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.gt\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.ge) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey >= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.ge\" }))\n#end\n## [End] Applying Key Condition **\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createBlogPost",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"BlogPost\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"BlogPost\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "getComment",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.commentId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listComments",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( $util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"When providing argument 'sortDirection' you must also provide argument 'blogPostId'.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n## [Start] Validate key arguments. **\n#if( !$util.isNull($ctx.args.commentId) && $util.isNull($ctx.args.blogPostId) )\n  $util.error(\"When providing argument 'commentId' you must also provide arguments blogPostId\", \"InvalidArgumentsError\")\n#end\n## [End] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogPostId) )\n  #set( $modelQueryExpression.expression = \"#blogPostId = :blogPostId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogPostId\": \"blogPostId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogPostId\": {\n      \"S\": \"$ctx.args.blogPostId\"\n  }\n} )\n#end\n## [Start] Applying Key Condition **\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.beginsWith) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.beginsWith\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.between) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey0\", { \"S\": \"$ctx.args.commentId.between[0]\" }))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey1\", { \"S\": \"$ctx.args.commentId.between[1]\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.eq) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey = :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.eq\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.lt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey < :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.lt\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.le) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey <= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.le\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.gt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey > :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.gt\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.ge) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey >= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.ge\" }))\n#end\n## [End] Applying Key Condition **\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createComment",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n\n\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateComment",
        "requestMappingTemplate": "\n\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteComment",
        "requestMappingTemplate": "\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      }
    ]
  },
  {
    "dataSourceProps": [
      "comment-table-ds",
      "A dynamo table datasource for Comment"
    ],
    "tableProps": [
      "comment-table",
      {
        "tableName": "comment-table"
      }
    ],
    "GSI": [
      {
        "indexName": "byPublishDate"
      }
    ],
    "resolverProps": [
      {
        "typeName": "Query",
        "fieldName": "getBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listBlogs",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"sortDirection is not supported for List operations without a Sort key defined.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createBlog",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteBlog",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "getBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.blogPostId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listBlogPosts",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( $util.isNull($ctx.args.blogId) && !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"When providing argument 'sortDirection' you must also provide argument 'blogId'.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n## [Start] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogPostId) && $util.isNull($ctx.args.blogId) )\n  $util.error(\"When providing argument 'blogPostId' you must also provide arguments blogId\", \"InvalidArgumentsError\")\n#end\n## [End] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [Start] Applying Key Condition **\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.beginsWith) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.beginsWith\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.between) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey0\", { \"S\": \"$ctx.args.blogPostId.between[0]\" }))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey1\", { \"S\": \"$ctx.args.blogPostId.between[1]\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.eq) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey = :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.eq\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.lt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey < :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.lt\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.le) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey <= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.le\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.gt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey > :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.gt\" }))\n#end\n#if( !$util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.blogPostId.ge) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey >= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"blogPostId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.blogPostId.ge\" }))\n#end\n## [End] Applying Key Condition **\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createBlogPost",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"BlogPost\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"BlogPost\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteBlogPost",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId),\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "getComment",
        "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.commentId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Query",
        "fieldName": "listComments",
        "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( $util.isNull($ctx.args.blogPostId) && !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"When providing argument 'sortDirection' you must also provide argument 'blogPostId'.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n## [Start] Validate key arguments. **\n#if( !$util.isNull($ctx.args.commentId) && $util.isNull($ctx.args.blogPostId) )\n  $util.error(\"When providing argument 'commentId' you must also provide arguments blogPostId\", \"InvalidArgumentsError\")\n#end\n## [End] Validate key arguments. **\n#if( !$util.isNull($ctx.args.blogPostId) )\n  #set( $modelQueryExpression.expression = \"#blogPostId = :blogPostId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogPostId\": \"blogPostId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogPostId\": {\n      \"S\": \"$ctx.args.blogPostId\"\n  }\n} )\n#end\n## [Start] Applying Key Condition **\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.beginsWith) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.beginsWith\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.between) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey0\", { \"S\": \"$ctx.args.commentId.between[0]\" }))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey1\", { \"S\": \"$ctx.args.commentId.between[1]\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.eq) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey = :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.eq\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.lt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey < :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.lt\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.le) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey <= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.le\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.gt) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey > :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.gt\" }))\n#end\n#if( !$util.isNull($ctx.args.commentId) && !$util.isNull($ctx.args.commentId.ge) )\n  #set( $modelQueryExpression.expression = \"$modelQueryExpression.expression AND #sortKey >= :sortKey\" )\n  $util.qr($modelQueryExpression.expressionNames.put(\"#sortKey\", \"commentId\"))\n  $util.qr($modelQueryExpression.expressionValues.put(\":sortKey\", { \"S\": \"$ctx.args.commentId.ge\" }))\n#end\n## [End] Applying Key Condition **\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "createComment",
        "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n\n\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateComment",
        "requestMappingTemplate": "\n\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      },
      {
        "typeName": "Mutation",
        "fieldName": "deleteComment",
        "requestMappingTemplate": "\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogPostId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogPostId),\n  \"commentId\": $util.dynamodb.toDynamoDB($ctx.args.input.commentId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "responseMappingTemplate": "$util.toJson($ctx.result)"
      }
    ]
  }
]