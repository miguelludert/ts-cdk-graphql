{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree"
      },
      "AppsyncGQLSchemaStack": {
        "id": "AppsyncGQLSchemaStack",
        "path": "AppsyncGQLSchemaStack",
        "children": {
          "name": {
            "id": "name",
            "path": "AppsyncGQLSchemaStack/name",
            "children": {
              "name-graphql-api": {
                "id": "name-graphql-api",
                "path": "AppsyncGQLSchemaStack/name/name-graphql-api",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "AppsyncGQLSchemaStack/name/name-graphql-api/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::GraphQLApi",
                      "aws:cdk:cloudformation:props": {
                        "authenticationType": "API_KEY",
                        "name": "name-graphql-api"
                      }
                    }
                  },
                  "DefaultAPIKeyApiKey": {
                    "id": "DefaultAPIKeyApiKey",
                    "path": "AppsyncGQLSchemaStack/name/name-graphql-api/DefaultAPIKeyApiKey",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::ApiKey",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "namegraphqlapiAF081DFB",
                            "ApiId"
                          ]
                        },
                        "description": "Default API Key created by CDK"
                      }
                    }
                  },
                  "Schema": {
                    "id": "Schema",
                    "path": "AppsyncGQLSchemaStack/name/name-graphql-api/Schema",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::GraphQLSchema",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "namegraphqlapiAF081DFB",
                            "ApiId"
                          ]
                        },
                        "definition": "type Blog @model @key(fields: [\"blogId\"]) {\n\tblogId: String!\n}\n"
                      }
                    }
                  },
                  "blog-table-dsDS": {
                    "id": "blog-table-dsDS",
                    "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS",
                    "children": {
                      "ServiceRole": {
                        "id": "ServiceRole",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/ServiceRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/ServiceRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/ServiceRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/ServiceRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "dynamodb:BatchGetItem",
                                            "dynamodb:GetRecords",
                                            "dynamodb:GetShardIterator",
                                            "dynamodb:Query",
                                            "dynamodb:GetItem",
                                            "dynamodb:Scan",
                                            "dynamodb:BatchWriteItem",
                                            "dynamodb:PutItem",
                                            "dynamodb:UpdateItem",
                                            "dynamodb:DeleteItem"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::GetAtt": [
                                                "blogtable69698442",
                                                "Arn"
                                              ]
                                            },
                                            {
                                              "Ref": "AWS::NoValue"
                                            }
                                          ]
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "namegraphqlapiblogtabledsDSServiceRoleDefaultPolicy199A5427",
                                    "roles": [
                                      {
                                        "Ref": "namegraphqlapiblogtabledsDSServiceRole1B565711"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "namegraphqlapiAF081DFB",
                                "ApiId"
                              ]
                            },
                            "name": "blog-table-ds",
                            "type": "AMAZON_DYNAMODB",
                            "description": "A dynamo table datasource for Blog",
                            "dynamoDbConfig": {
                              "tableName": {
                                "Ref": "blogtable69698442"
                              },
                              "awsRegion": {
                                "Ref": "AWS::Region"
                              }
                            },
                            "serviceRoleArn": {
                              "Fn::GetAtt": [
                                "namegraphqlapiblogtabledsDSServiceRole1B565711",
                                "Arn"
                              ]
                            }
                          }
                        }
                      },
                      "QuerygetBlogResolver": {
                        "id": "QuerygetBlogResolver",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/QuerygetBlogResolver",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/QuerygetBlogResolver/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                              "aws:cdk:cloudformation:props": {
                                "apiId": {
                                  "Fn::GetAtt": [
                                    "namegraphqlapiAF081DFB",
                                    "ApiId"
                                  ]
                                },
                                "fieldName": "getBlog",
                                "typeName": "Query",
                                "dataSourceName": "blog-table-ds",
                                "kind": "UNIT",
                                "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
                                "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
                              }
                            }
                          }
                        }
                      },
                      "QuerylistBlogsResolver": {
                        "id": "QuerylistBlogsResolver",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/QuerylistBlogsResolver",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/QuerylistBlogsResolver/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                              "aws:cdk:cloudformation:props": {
                                "apiId": {
                                  "Fn::GetAtt": [
                                    "namegraphqlapiAF081DFB",
                                    "ApiId"
                                  ]
                                },
                                "fieldName": "listBlogs",
                                "typeName": "Query",
                                "dataSourceName": "blog-table-ds",
                                "kind": "UNIT",
                                "requestMappingTemplate": "## [Start] Set query expression for @key **\n#if( !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"sortDirection is not supported for List operations without a Sort key defined.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
                                "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
                              }
                            }
                          }
                        }
                      },
                      "MutationcreateBlogResolver": {
                        "id": "MutationcreateBlogResolver",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationcreateBlogResolver",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationcreateBlogResolver/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                              "aws:cdk:cloudformation:props": {
                                "apiId": {
                                  "Fn::GetAtt": [
                                    "namegraphqlapiAF081DFB",
                                    "ApiId"
                                  ]
                                },
                                "fieldName": "createBlog",
                                "typeName": "Mutation",
                                "dataSourceName": "blog-table-ds",
                                "kind": "UNIT",
                                "requestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
                                "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
                              }
                            }
                          }
                        }
                      },
                      "MutationupdateBlogResolver": {
                        "id": "MutationupdateBlogResolver",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationupdateBlogResolver",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationupdateBlogResolver/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                              "aws:cdk:cloudformation:props": {
                                "apiId": {
                                  "Fn::GetAtt": [
                                    "namegraphqlapiAF081DFB",
                                    "ApiId"
                                  ]
                                },
                                "fieldName": "updateBlog",
                                "typeName": "Mutation",
                                "dataSourceName": "blog-table-ds",
                                "kind": "UNIT",
                                "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
                                "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
                              }
                            }
                          }
                        }
                      },
                      "MutationdeleteBlogResolver": {
                        "id": "MutationdeleteBlogResolver",
                        "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationdeleteBlogResolver",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationdeleteBlogResolver/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                              "aws:cdk:cloudformation:props": {
                                "apiId": {
                                  "Fn::GetAtt": [
                                    "namegraphqlapiAF081DFB",
                                    "ApiId"
                                  ]
                                },
                                "fieldName": "deleteBlog",
                                "typeName": "Mutation",
                                "dataSourceName": "blog-table-ds",
                                "kind": "UNIT",
                                "requestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
                                "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "blog-table": {
                "id": "blog-table",
                "path": "AppsyncGQLSchemaStack/name/blog-table",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "AppsyncGQLSchemaStack/name/blog-table/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "blogId",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "blogId",
                            "attributeType": "S"
                          }
                        ],
                        "provisionedThroughput": {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5
                        },
                        "tableName": "blog-table"
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "AppsyncGQLSchemaStack/name/blog-table/ScalingRole"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}