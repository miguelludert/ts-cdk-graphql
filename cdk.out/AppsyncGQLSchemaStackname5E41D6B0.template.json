{
  "Resources": {
    "namegraphqlapiAF081DFB": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "AuthenticationType": "API_KEY",
        "Name": "name-graphql-api"
      },
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/Resource"
      }
    },
    "namegraphqlapiDefaultAPIKeyApiKey06CC4F02": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "Description": "Default API Key created by CDK"
      },
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/DefaultAPIKeyApiKey"
      }
    },
    "namegraphqlapiSchema8EAD5C23": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "Definition": "type Blog @model @key(fields: [\"blogId\"]) {\n\tblogId: String!\n}\n"
      },
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/Schema"
      }
    },
    "namegraphqlapiblogtabledsDSServiceRole1B565711": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/ServiceRole/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSServiceRoleDefaultPolicy199A5427": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "blogtable69698442",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "namegraphqlapiblogtabledsDSServiceRoleDefaultPolicy199A5427",
        "Roles": [
          {
            "Ref": "namegraphqlapiblogtabledsDSServiceRole1B565711"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSC6A9CE97": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "Name": "blog-table-ds",
        "Type": "AMAZON_DYNAMODB",
        "Description": "A dynamo table datasource for Blog",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": {
            "Ref": "blogtable69698442"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "namegraphqlapiblogtabledsDSServiceRole1B565711",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSQuerygetBlogResolverE17241C7": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "FieldName": "getBlog",
        "TypeName": "Query",
        "DataSourceName": "blog-table-ds",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.blogId)\n} )\n## [End] Set the primary @key. **\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n} #end\n}",
        "ResponseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
      },
      "DependsOn": [
        "namegraphqlapiblogtabledsDSC6A9CE97",
        "namegraphqlapiSchema8EAD5C23"
      ],
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/QuerygetBlogResolver/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSQuerylistBlogsResolverF2FE7BED": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "FieldName": "listBlogs",
        "TypeName": "Query",
        "DataSourceName": "blog-table-ds",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Set query expression for @key **\n#if( !$util.isNull($ctx.args.sortDirection) )\n  $util.error(\"sortDirection is not supported for List operations without a Sort key defined.\", \"InvalidArgumentsError\")\n#end\n#set( $modelQueryExpression = {} )\n#if( !$util.isNull($ctx.args.blogId) )\n  #set( $modelQueryExpression.expression = \"#blogId = :blogId\" )\n  #set( $modelQueryExpression.expressionNames = {\n  \"#blogId\": \"blogId\"\n} )\n  #set( $modelQueryExpression.expressionValues = {\n  \":blogId\": {\n      \"S\": \"$ctx.args.blogId\"\n  }\n} )\n#end\n## [End] Set query expression for @key **\n#set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken = $context.args.nextToken )\n#end\n#if( $context.args.filter )\n  #set( $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\") )\n#end\n#if( !$util.isNull($modelQueryExpression)\n                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $modelQueryExpression))\n  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
      },
      "DependsOn": [
        "namegraphqlapiblogtabledsDSC6A9CE97",
        "namegraphqlapiSchema8EAD5C23"
      ],
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/QuerylistBlogsResolver/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSMutationcreateBlogResolverDDCD1EA3": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "FieldName": "createBlog",
        "TypeName": "Mutation",
        "DataSourceName": "blog-table-ds",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Set default values. **\n#set( $createdAt = $util.time.nowISO8601() )\n## Automatically set the createdAt timestamp. **\n$util.qr($context.args.input.put(\"createdAt\", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))\n## [End] Set default values. **\n## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n## [Start] Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n#set( $condition = {\n  \"expression\": \"attribute_not_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#if( $context.args.condition )\n  #set( $condition.expressionValues = {} )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\":   $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": $util.toJson($condition)\n}\n## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
      },
      "DependsOn": [
        "namegraphqlapiblogtabledsDSC6A9CE97",
        "namegraphqlapiSchema8EAD5C23"
      ],
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationcreateBlogResolver/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSMutationupdateBlogResolverA16DE5A5": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "FieldName": "updateBlog",
        "TypeName": "Mutation",
        "DataSourceName": "blog-table-ds",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n\n#if( $authCondition && $authCondition.expression != \"\" )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {},\n  \"expressionValues\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n  #end\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))\n$util.qr($context.args.input.put(\"__typename\", \"Blog\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )\n  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": {\n      \"S\": $util.toJson($context.args.input.id)\n  }\n} #end,\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
        "ResponseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
      },
      "DependsOn": [
        "namegraphqlapiblogtabledsDSC6A9CE97",
        "namegraphqlapiSchema8EAD5C23"
      ],
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationupdateBlogResolver/Resource"
      }
    },
    "namegraphqlapiblogtabledsDSMutationdeleteBlogResolver19F5104D": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "namegraphqlapiAF081DFB",
            "ApiId"
          ]
        },
        "FieldName": "deleteBlog",
        "TypeName": "Mutation",
        "DataSourceName": "blog-table-ds",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Set the primary @key. **\n#set( $modelObjectKey = {\n  \"blogId\": $util.dynamodb.toDynamoDB($ctx.args.input.blogId)\n} )\n## [End] Set the primary @key. **\n#if( $authCondition )\n  #set( $condition = $authCondition )\n  #if( $modelObjectKey )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n    $util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n  #end\n#else\n  #if( $modelObjectKey )\n    #set( $condition = {\n  \"expression\": \"\",\n  \"expressionNames\": {}\n} )\n    #foreach( $entry in $modelObjectKey.entrySet() )\n      #if( $velocityCount == 1 )\n        $util.qr($condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\"))\n      #else\n        $util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\"))\n      #end\n      $util.qr($condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n    #end\n  #else\n    #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n  #end\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n  #set( $condition.expressionValues = $expressionValues )\n#end\n#if( $context.args.condition )\n  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\"))\n  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))\n  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))\n  #set( $condition.expressionValues = $conditionExpressionValues )\n  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))\n#end\n#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )\n  #set( $condition = {\n  \"expression\": $condition.expression,\n  \"expressionNames\": $condition.expressionNames\n} )\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\",\n  \"key\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {\n  \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n} #end,\n  \"condition\": $util.toJson($condition)\n}",
        "ResponseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n$util.toJson($ctx.result)\n#end"
      },
      "DependsOn": [
        "namegraphqlapiblogtabledsDSC6A9CE97",
        "namegraphqlapiSchema8EAD5C23"
      ],
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/name-graphql-api/blog-table-dsDS/MutationdeleteBlogResolver/Resource"
      }
    },
    "blogtable69698442": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "blogId",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "blogId",
            "AttributeType": "S"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "blog-table"
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AppsyncGQLSchemaStack/name/blog-table/Resource"
      }
    }
  }
}